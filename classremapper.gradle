buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.+', changing: true
    }
}
import net.minecraftforge.gradle.common.task.TaskApplyRangeMap
import net.minecraftforge.gradle.common.task.TaskExtractExistingFiles
import net.minecraftforge.gradle.common.task.TaskExtractRangeMap
import net.minecraftforge.gradle.common.util.MavenArtifactDownloader
import net.minecraftforge.gradle.common.util.MinecraftExtension
import net.minecraftforge.gradle.common.util.MinecraftRepo
import net.minecraftforge.srgutils.IMappingBuilder
import net.minecraftforge.srgutils.IMappingFile

repositories {
    maven { url = 'https://maven.minecraftforge.net' }
    mavenCentral()
}

def doingUpdate = hasProperty('UPDATE_CLASSNAMES')

if (doingUpdate) {
    afterEvaluate { project ->
        def javaCompile = project.tasks.getByName('compileJava') as JavaCompile
        def sourceSets = (project.convention.plugins.get('java') as JavaPluginConvention).sourceSets
        Set<File> srcDirs = new HashSet<>()
        (project.findProperty('UPDATE_SOURCESETS') ?: 'main').toString().split(';').each {
            srcDirs.addAll(sourceSets.getByName(it).java.srcDirs)
        }

        if (srcDirs.empty)
            throw new RuntimeException("No java source directories found to update!")

        task extractRangeMap(type: TaskExtractRangeMap) {
            sources srcDirs
            addDependencies javaCompile.getClasspath()
        }

        task chainMappings(type: CreatedChainMojmapsTask) {
            dependsOn(extractSrg)
            mcVersion MinecraftRepo.getMCVersion(project.extensions.findByType(MinecraftExtension.class).mappingVersion ?: '1.16.5')
            extractSrgInput tasks.extractSrg.output
        }

        task applyRangeMap(type: TaskApplyRangeMap) {
            dependsOn(extractRangeMap, chainMappings)
            rangeMap tasks.extractRangeMap.output
            setSrgFiles chainMappings.output //, tasks.createMcpToSrg.output
            sources srcDirs
        }

        task extractMappedNew(type: TaskExtractExistingFiles) { task ->
            dependsOn(applyRangeMap)
            archive tasks.applyRangeMap.output
            srcDirs.each { task.addTarget(it) }
        }

        task updateClassnames {
            dependsOn(extractMappedNew)
        }
    }
}

class CreatedChainMojmapsTask extends DefaultTask {
    @Input String mcVersion
    @InputFile File extractSrgInput
    @OutputFile File output = new File(project.buildDir, name + "/chainedmappings.tsrg")

    @TaskAction
    void doTask() {
        def mojToObf = IMappingFile.load(MavenArtifactDownloader.generate(project, "net.minecraft:client:${mcVersion}:mappings@txt", false))
        def obfToSrg = IMappingFile.load(extractSrgInput)

        def mojToSrg = mojToObf.chain(obfToSrg)
        def builder = IMappingBuilder.create()

        mojToSrg.getClasses().each {builder.addClass(it.mapped, it.original) }

        builder.build().write(output.toPath(), IMappingFile.Format.TSRG2)
    }
}